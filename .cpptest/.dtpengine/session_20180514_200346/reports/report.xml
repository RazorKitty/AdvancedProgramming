<?xml version='1.0' encoding='UTF-8'?>
<ResultsSession buildId="2018-05-14" climode="true" execEnv="win32_x86" hasViols="true" id="1526683687860" lang="en_GB" machine="FEN-052-066" prjModule="ACW_WordSearch" project="" tag="Example Configuration" time="2018-05-14T20:03:54+01:00" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="10.3.4" user="515817">
   <TestConfig machine="FEN-052-066" name="Example Configuration" pseudoUrl="user://Example Configuration" user="515817" />
   <Authors>
      <Author id="dev1" name="515817" />
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.3.4" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.desktop.files.in.scope" name="Helper Scope Analyzer for C++test Desktop" ver="10.3.4" />
      <Analyzer id="xtest" name="Scope Analyzer" ver="1" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.3.4" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.3.4" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.3.4" />
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1" />
   </VersionInfos>
   <Goals tsks="46">
      
   </Goals>
   <Scope>
      <Repositories />
      <Locations>
         <Loc auth="515817" hash="-718207839" locRef="1" projId="ACW_WordSearch" projPath="/ACW_WordSearch" project="ACW_WordSearch" resProjPath="WordSearch.cpp" totLns="164" uri="file://FEN-052-066/C:/Users/515817/Source/Repos/AdvancedProgramming/ACW_WordSearch/WordSearch.cpp" />
      </Locations>
   </Scope>
   
  <SetupProblems />

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:03">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="1" checkedLns="164" id="ACW_WordSearch" name="ACW_WordSearch" qfixErrs="0" suppErrs="0" totErrs="46" totFiles="1" totLns="164" />
      </Projects>
      
      
      
      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="Flow Analysis" name="BD" rules="82" total="0">
               <Category authTot="0;" authUrg="0;" desc="Incorrect API usage" name="BD-API" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Miscellaneous" name="BD-MISC" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Possible Bugs" name="BD-PB" rules="41" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Resources" name="BD-RES" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Security" name="BD-SECURITY" rules="12" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Containers" name="BD-CO" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Threads &amp; Synchronization" name="BD-TRS" rules="13" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Code Duplication Detection" name="CDD" rules="4" total="0" />
            <Category authTot="3;" authUrg="3;" desc="Coding Conventions" name="CODSTA" rules="343" total="3">
               <Category authTot="0;" authUrg="0;" desc="Coding Conventions for C++" name="CODSTA-CPP" rules="94" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Coding Conventions for Modern C++" name="CODSTA-MCPP" rules="26" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Comments" name="COMMENT" rules="13" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Exceptions" name="EXCEPT" rules="18" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Formatting" name="FORMAT" rules="47" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Global Static Analysis" name="GLOBAL" rules="15" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Initialization" name="INIT" rules="18" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Joint Strike Fighter" name="JSF" rules="270" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Metric" name="METRIC" rules="49" total="0" />
            <Category authTot="1;" authUrg="1;" desc="Metrics" name="METRICS" rules="43" total="1" />
            <Category authTot="0;" authUrg="0;" desc="MISRA C" name="MISRA" rules="60" total="0" />
            <Category authTot="18;" authUrg="18;" desc="MISRA C 2004" name="MISRA2004" rules="216" total="18" />
            <Category authTot="0;" authUrg="0;" desc="MISRA C++ 2008" name="MISRA2008" rules="313" total="0" />
            <Category authTot="0;" authUrg="0;" desc="MISRA C 2012" name="MISRA2012" rules="327" total="0">
               <Category authTot="0;" authUrg="0;" desc="MISRA C 2012 Rules" name="MISRA2012-RULE" rules="287" total="0" />
               <Category authTot="0;" authUrg="0;" desc="MISRA C 2012 Directives" name="MISRA2012-DIR" rules="40" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Memory and Resource Management" name="MRM" rules="53" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Naming Conventions" name="NAMING" rules="94" total="0">
               <Category authTot="0;" authUrg="0;" desc="Hungarian Notation" name="NAMING-HN" rules="44" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Object Oriented" name="OOP" rules="56" total="0" />
            <Category authTot="24;" authUrg="24;" desc="Optimization" name="OPT" rules="41" total="24" />
            <Category authTot="0;" authUrg="0;" desc="Parser diagnostics" name="PARSER" rules="2" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Possible Bugs" name="PB" rules="73" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Physical File Organization" name="PFO" rules="9" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Portability" name="PORT" rules="26" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Preprocessor" name="PREPROC" rules="19" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Qt Best Practices" name="QT" rules="18" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Security" name="SECURITY" rules="49" total="0" />
            <Category authTot="0;" authUrg="0;" desc="STL Best Practices" name="STL" rules="42" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Template" name="TEMPL" rules="14" total="0" />
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid internal or external name conflict with a C++ reserved word" id="CODSTA-39" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Local variables should not use the same names as member variables" id="CODSTA-44" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use break in for loops" id="CODSTA-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare the size of an array when the array is passed into a function as a parameter" id="CODSTA-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Array elements shall be accessed by the array operator [ ]" id="CODSTA-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not cast pointers to functions to pointers to primitive types" id="CODSTA-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Storage type modifiers shall be associated with the type, not the variable or the function" id="CODSTA-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Never convert consts to non-consts" id="CODSTA-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="3;" cat="CODSTA" desc="Avoid magic numbers" id="CODSTA-26" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Always provide a default branch for switch statements" id="CODSTA-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pass built-in-types by value unless you are modifying them" id="CODSTA-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Constructors allowing for conversion should be made explicit" id="CODSTA-CPP-04" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use user-defined conversion functions" id="CODSTA-CPP-05" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Declare at least one constructor to prevent the compiler from doing so" id="CODSTA-CPP-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type" id="CODSTA-CPP-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid returning handles to class data from member functions" id="CODSTA-CPP-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not define structs that contain member functions" id="CODSTA-CPP-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer C++-style casts" id="CODSTA-CPP-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use the 'struct' keyword to declare a variable in C++" id="CODSTA-CPP-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid making any assignment operator virtual. Do not return const T&amp; from assignment operator" id="CODSTA-CPP-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Keep a type and its nonmember function interface in the same namespace" id="CODSTA-CPP-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid using static_cast on pointers" id="CODSTA-CPP-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Don't write namespace usings in a header file or before an #include" id="CODSTA-CPP-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use the 'enum' keyword to declare a variable in C++" id="CODSTA-CPP-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Declare reference parameters as const references whenever possible" id="CODSTA-CPP-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer iostream.h to stdio.h" id="CODSTA-CPP-01" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="EXCEPT-01" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Throw by value, catch by reference" id="EXCEPT-02" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not throw from within destructor" id="EXCEPT-03" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="All exceptions should be rethrown or logged with standard logger" id="EXCEPT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not initialize a reference to an object whose address can be changed" id="INIT-05" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="All member variables should be initialized in constructor" id="INIT-06" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Initialize static class members" id="INIT-09" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Initialize all pointer variables" id="INIT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="An assignment operator shall assign all data members" id="INIT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Objects with external linkage should not be initialized in a header file" id="INIT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Make class members' initialization explicit by providing user-defined constructor" id="INIT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="User-defined constructor must be provided to ensure the proper initialization of dynamically allocated class objects" id="INIT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="List members in an initialization list in the order in which they are declared" id="INIT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Avoid initialization order problems across translation units by replacing non-local static objects with local static objects" id="INIT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not assume that members are initialized in any special order in constructors" id="INIT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Prefer initialization to assignment in constructors" id="INIT-14" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of public methods per class" id="METRICS-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="METRICS" desc="Follow the Cyclomatic Complexity limit of 10" id="METRICS-18" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRA2004-12_2_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="7;" cat="MISRA2004" desc="Avoid implicit conversions between signed and unsigned integer types" id="MISRA2004-10_1_a" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions between signed and unsigned integer types" id="MISRA2004-10_1_h" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast should not convert a pointer type to an integral type" id="MISRA2004-11_3_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2004-12_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRA2004-12_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRA2004-12_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRA2004-12_2_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not use more than one volatile in one expression" id="MISRA2004-12_2_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRA2004-12_2_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="MISRA2004-12_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="MISRA2004-13_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Floating-point expressions shall not be tested for equality or inequality" id="MISRA2004-13_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The controlling expression of a for statement shall not contain any objects of floating type" id="MISRA2004-13_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The three expressions of a for statement shall be concerned only with loop control" id="MISRA2004-13_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not modify for loop counter within a body of the loop" id="MISRA2004-13_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="4;" cat="MISRA2004" desc="The goto statement shall not be used" id="MISRA2004-14_4" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A function shall have a single point of exit at the end of the function" id="MISRA2004-14_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="7;" cat="MISRA2004" desc="'if' and 'else' should be followed by a compound statement" id="MISRA2004-14_9" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRA2004-15_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRA2004-16_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRA2004-17_6_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not redefine reserved words" id="MISRA2004-20_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="MISRA2004-5_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="MISRA2004-5_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not reuse typedef names" id="MISRA2004-5_3_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not reuse typedef names as a typedef name" id="MISRA2004-5_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined" id="MRM-01" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not invoke malloc/realloc for objects having constructors" id="MRM-08" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Avoid hiding the global new" id="MRM-32" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare a copy assignment operator for classes with dynamically allocated memory" id="MRM-37" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare a copy constructor for classes with dynamically allocated memory" id="MRM-38" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Never return a dereferenced local pointer initialized by new in this function scope" id="MRM-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Call delete on pointer members in destructors" id="MRM-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Provide error handling for file opening errors right next to the call to fopen" id="MRM-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Don't memcpy or memcmp non-PODs" id="MRM-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Adhere to convention when writing new and delete" id="MRM-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Write operator delete if you write operator new" id="MRM-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Write operator delete[] if you write operator new[]" id="MRM-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use allocation by declaration rather than by new or malloc" id="MRM-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Freed memory shouldn't be accessed under any circumstances" id="MRM-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="MRM-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="MRM-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Functions that begin with 'is' should return boolean values" id="NAMING-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Names of parameters in declaration and definition should be identical" id="NAMING-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Class cannot inherit other class more than once unless it is virtual inheritance" id="OOP-03" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Be wary about using multiple inheritance of classes that are not abstract interfaces" id="OOP-07" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not directly access global data from a constructor" id="OOP-08" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid calling virtual functions from constructors" id="OOP-16" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Define a virtual destructor in classes used as base classes which have virtual functions" id="OOP-22" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Make destructors virtual in base classes" id="OOP-24" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A pointer to an abstract class shall not be converted to a pointer of a class that inherits from that abstract class" id="OOP-29" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Make base class destructors public and virtual, or protected and nonvirtual" id="OOP-31" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid using global data in member functions" id="OOP-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid &quot;public&quot; data members" id="OOP-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid 'protected' data members" id="OOP-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="If a class has virtual functions it shall have a virtual destructor" id="OOP-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not derive functions with the same name from more than one base class" id="OOP-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="For multiple inheritance use virtual common base class" id="OOP-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Protected member function shall not return non-const handles to private class-data" id="OOP-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not redefine an inherited virtual function with a different default parameter value" id="OOP-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid explicit cast from derived to a base class" id="OOP-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Use the virtual keyword if a subclass implements a virtual function" id="OOP-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid declaring virtual functions inline" id="OOP-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Never redefine an inherited nonvirtual function" id="OOP-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not redefine an inherited nonvirtual function with template parameter" id="OOP-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Public member functions shall not return non-const handles to private/protected class-data" id="OOP-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Write a using declaration to redeclare overloaded functions" id="OOP-17" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Check for assignment to self in operator=" id="OOP-34" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Eliminate unused parameters" id="OPT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Declare variables as locally as possible" id="OPT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="24;" authUrg="24;" cat="OPT" desc="Prefer canonical form of ++ and --. Prefer calling the prefix forms" id="OPT-04" sev="3" total="24" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Eliminate unused private member variables" id="OPT-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="If a file-level static variable is used/referenced in one function only then include that variable in the function itself" id="OPT-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="If a file-level static variable is used/referenced in one class only then include that variable in the class itself" id="OPT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Declare member variables in the descending size order" id="OPT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Pass objects by reference instead of by value" id="OPT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid inline constructors and destructors" id="OPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid unused local variables" id="OPT-02" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid unnecessary local variables" id="OPT-06" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call delete on non-pointers" id="PB-13" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Operators should not return value by reference" id="PB-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Don't treat arrays polymorphically" id="PB-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not cast a signed char to an unsigned int" id="PB-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Don't assign the dividend of two integers to a floating-point type" id="PB-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid assigning out-of-range value to char type" id="PB-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid assigning out-of-range value to unsigned char type" id="PB-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid overloading class methods on a pointer and a numerical type" id="PB-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Don't define entities with linkage in a header file" id="PFO-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Use multiple include guards" id="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use hard coded value of offset in structures" id="PORT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not cast an int pointer to a long pointer" id="PORT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not pass long casted to an int in function call" id="PORT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Don't use macros in include statement" id="PREPROC-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="In a macro function, use parentheses before and after multiplication or division" id="PREPROC-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Do not allow relative path names in #include statements" id="PREPROC-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Don't define part of statement" id="PREPROC-04" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Never use gets()" id="SECURITY-16" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using data() function from 'string' class of standard library" id="SECURITY-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use scanf and fscanf functions without specifying variable size in format string" id="SECURITY-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Make predicates const pure functions" id="STL-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Don't change default arguments of virtual functions in template classes" id="TEMPL-06" sev="3" total="0" />
         </RulesList>
         <SeverityList>
            <Severity authTot="46;" authUrg="46;" id="3" total="46" />
         </SeverityList>
      </Rules>
      
  <Supps />

      
  <StdViols>
    <StdViol msg="Postfix operator applied to variable 'y'; prefer prefix type" ln="21" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="21" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="-1107926375" tool="c++test" lineHash="-1107926375" locStartPos="31" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="32" locType="sr" urgent="true" hash="-718207839" locEndLn="21" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'x'; prefer prefix type" ln="24" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="24" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="-1955808655" tool="c++test" lineHash="-1955808655" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="33" locType="sr" urgent="true" hash="-718207839" locEndLn="24" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'y'; prefer prefix type" ln="47" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="47" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="-1107926375" tool="c++test" lineHash="-1107926375" locStartPos="31" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="32" locType="sr" urgent="true" hash="-718207839" locEndLn="47" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'y'; prefer prefix type" ln="50" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="50" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="-1107926375" tool="c++test" lineHash="-1107926375" locStartPos="31" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="32" locType="sr" urgent="true" hash="-718207839" locEndLn="50" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'x'; prefer prefix type" ln="52" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="52" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="-1955808655" tool="c++test" lineHash="-1955808655" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="33" locType="sr" urgent="true" hash="-718207839" locEndLn="52" goals="1," />
    <StdViol msg="Literal constant '8' is used" ln="57" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="57" sev="3" auth="515817" locRef="1" rule="CODSTA-26" lnHash="-753401110" tool="c++test" lineHash="-753401110" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="40" locType="sr" urgent="true" hash="-718207839" locEndLn="57" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'direction'; prefer prefix type" ln="57" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="57" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="-753401110" tool="c++test" lineHash="-753401110" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="43" locType="sr" urgent="true" hash="-718207839" locEndLn="57" goals="1," />
    <StdViol msg="Conditional statement 'if' in a function 'ReadAdvancedPuzzle' should be followed by a block" ln="61" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="61" sev="3" auth="515817" locRef="1" rule="MISRA2004-14_9" lnHash="891511604" tool="c++test" lineHash="891511604" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="-718207839" locEndLn="61" goals="1," />
    <StdViol msg="An 'else' statement in a function 'ReadAdvancedPuzzle' shall be followed by a block " ln="64" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="64" sev="3" auth="515817" locRef="1" rule="MISRA2004-14_9" lnHash="-260338650" tool="c++test" lineHash="-260338650" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="-718207839" locEndLn="64" goals="1," />
    <StdViol msg="Function 'SolvePuzzleSimple' has high Cyclomatic Complexity value: 13" ln="76" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="76" sev="3" auth="515817" locRef="1" rule="METRICS-18" lnHash="-1309272467" tool="c++test" lineHash="-1309272467" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="18" locType="sr" urgent="true" hash="-718207839" locEndLn="76" goals="1," />
    <StdViol msg="Implicit conversion between signed and unsigned type shall not be used" ln="77" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="77" sev="3" auth="515817" locRef="1" rule="MISRA2004-10_1_a" lnHash="-312566318" tool="c++test" lineHash="-312566318" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="21" locType="sr" urgent="true" hash="-718207839" locEndLn="77" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'word'; prefer prefix type" ln="77" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="77" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="-312566318" tool="c++test" lineHash="-312566318" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="53" locType="sr" urgent="true" hash="-718207839" locEndLn="77" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'dictionaryVisits'; prefer prefix type" ln="78" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="78" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="-786710467" tool="c++test" lineHash="-786710467" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" urgent="true" hash="-718207839" locEndLn="78" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'y'; prefer prefix type" ln="79" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="79" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="-2049989045" tool="c++test" lineHash="-2049989045" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="33" locType="sr" urgent="true" hash="-718207839" locEndLn="79" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'x'; prefer prefix type" ln="80" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="80" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="1949341653" tool="c++test" lineHash="1949341653" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="34" locType="sr" urgent="true" hash="-718207839" locEndLn="80" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'cellVisits'; prefer prefix type" ln="81" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="81" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="-362868783" tool="c++test" lineHash="-362868783" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="-718207839" locEndLn="81" goals="1," />
    <StdViol msg="Literal constant '8' is used" ln="83" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="83" sev="3" auth="515817" locRef="1" rule="CODSTA-26" lnHash="-1280502299" tool="c++test" lineHash="-1280502299" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="42" locType="sr" urgent="true" hash="-718207839" locEndLn="83" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'direction'; prefer prefix type" ln="83" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="83" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="-1280502299" tool="c++test" lineHash="-1280502299" locStartPos="44" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="45" locType="sr" urgent="true" hash="-718207839" locEndLn="83" goals="1," />
    <StdViol msg="Implicit conversion between signed and unsigned type shall not be used" ln="86" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="86" sev="3" auth="515817" locRef="1" rule="MISRA2004-10_1_a" lnHash="909851294" tool="c++test" lineHash="909851294" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="28" locType="sr" urgent="true" hash="-718207839" locEndLn="86" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'letter'; prefer prefix type" ln="86" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="86" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="909851294" tool="c++test" lineHash="909851294" locStartPos="72" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="73" locType="sr" urgent="true" hash="-718207839" locEndLn="86" goals="1," />
    <StdViol msg="Conditional statement 'if' in a function 'SolvePuzzleSimple' should be followed by a block" ln="89" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="89" sev="3" auth="515817" locRef="1" rule="MISRA2004-14_9" lnHash="-1180331132" tool="c++test" lineHash="-1180331132" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="8" locType="sr" urgent="true" hash="-718207839" locEndLn="89" goals="1," />
    <StdViol msg="Do not use the 'goto' statement" ln="90" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="90" sev="3" auth="515817" locRef="1" rule="MISRA2004-14_4" lnHash="-1768744980" tool="c++test" lineHash="-1768744980" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" urgent="true" hash="-718207839" locEndLn="90" goals="1," />
    <StdViol msg="Do not use the 'goto' statement" ln="94" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="94" sev="3" auth="515817" locRef="1" rule="MISRA2004-14_4" lnHash="-720476159" tool="c++test" lineHash="-720476159" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="7" locType="sr" urgent="true" hash="-718207839" locEndLn="94" goals="1," />
    <StdViol msg="Implicit conversion between signed and unsigned type shall not be used" ln="111" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="111" sev="3" auth="515817" locRef="1" rule="MISRA2004-10_1_a" lnHash="-312566318" tool="c++test" lineHash="-312566318" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="21" locType="sr" urgent="true" hash="-718207839" locEndLn="111" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'word'; prefer prefix type" ln="111" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="111" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="-312566318" tool="c++test" lineHash="-312566318" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="53" locType="sr" urgent="true" hash="-718207839" locEndLn="111" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'dictionaryVisits'; prefer prefix type" ln="112" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="112" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="-786710467" tool="c++test" lineHash="-786710467" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" urgent="true" hash="-718207839" locEndLn="112" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'y'; prefer prefix type" ln="113" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="113" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="-2049989045" tool="c++test" lineHash="-2049989045" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="33" locType="sr" urgent="true" hash="-718207839" locEndLn="113" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'x'; prefer prefix type" ln="114" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="114" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="1949341653" tool="c++test" lineHash="1949341653" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="34" locType="sr" urgent="true" hash="-718207839" locEndLn="114" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'cellVisits'; prefer prefix type" ln="115" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="115" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="-362868783" tool="c++test" lineHash="-362868783" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="-718207839" locEndLn="115" goals="1," />
    <StdViol msg="Literal constant '8' is used" ln="117" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="117" sev="3" auth="515817" locRef="1" rule="CODSTA-26" lnHash="-1280502299" tool="c++test" lineHash="-1280502299" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="42" locType="sr" urgent="true" hash="-718207839" locEndLn="117" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'direction'; prefer prefix type" ln="117" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="117" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="-1280502299" tool="c++test" lineHash="-1280502299" locStartPos="44" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="45" locType="sr" urgent="true" hash="-718207839" locEndLn="117" goals="1," />
    <StdViol msg="Implicit conversion between signed and unsigned type shall not be used" ln="119" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="119" sev="3" auth="515817" locRef="1" rule="MISRA2004-10_1_a" lnHash="909851294" tool="c++test" lineHash="909851294" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="28" locType="sr" urgent="true" hash="-718207839" locEndLn="119" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'letter'; prefer prefix type" ln="119" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="119" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="909851294" tool="c++test" lineHash="909851294" locStartPos="72" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="73" locType="sr" urgent="true" hash="-718207839" locEndLn="119" goals="1," />
    <StdViol msg="Conditional statement 'if' in a function 'SolvePuzzleAdvanced' should be followed by a block" ln="121" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="121" sev="3" auth="515817" locRef="1" rule="MISRA2004-14_9" lnHash="619383641" tool="c++test" lineHash="619383641" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="8" locType="sr" urgent="true" hash="-718207839" locEndLn="121" goals="1," />
    <StdViol msg="Do not use the 'goto' statement" ln="122" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="122" sev="3" auth="515817" locRef="1" rule="MISRA2004-14_4" lnHash="-1768744980" tool="c++test" lineHash="-1768744980" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" urgent="true" hash="-718207839" locEndLn="122" goals="1," />
    <StdViol msg="Do not use the 'goto' statement" ln="126" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="126" sev="3" auth="515817" locRef="1" rule="MISRA2004-14_4" lnHash="-720476159" tool="c++test" lineHash="-720476159" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="7" locType="sr" urgent="true" hash="-718207839" locEndLn="126" goals="1," />
    <StdViol msg="Implicit conversion between signed and unsigned type shall not be used" ln="143" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="143" sev="3" auth="515817" locRef="1" rule="MISRA2004-10_1_a" lnHash="84854640" tool="c++test" lineHash="84854640" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="18" locType="sr" urgent="true" hash="-718207839" locEndLn="143" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'i'; prefer prefix type" ln="143" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="143" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="84854640" tool="c++test" lineHash="84854640" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="47" locType="sr" urgent="true" hash="-718207839" locEndLn="143" goals="1," />
    <StdViol msg="Conditional statement 'if' in a function 'WriteResults' should be followed by a block" ln="144" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="144" sev="3" auth="515817" locRef="1" rule="MISRA2004-14_9" lnHash="-738580689" tool="c++test" lineHash="-738580689" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" urgent="true" hash="-718207839" locEndLn="144" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'wordsFound'; prefer prefix type" ln="145" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="145" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="-1222562407" tool="c++test" lineHash="-1222562407" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" urgent="true" hash="-718207839" locEndLn="145" goals="1," />
    <StdViol msg="Implicit conversion between signed and unsigned type shall not be used" ln="149" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="149" sev="3" auth="515817" locRef="1" rule="MISRA2004-10_1_a" lnHash="84854640" tool="c++test" lineHash="84854640" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="18" locType="sr" urgent="true" hash="-718207839" locEndLn="149" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'i'; prefer prefix type" ln="149" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="149" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="84854640" tool="c++test" lineHash="84854640" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="47" locType="sr" urgent="true" hash="-718207839" locEndLn="149" goals="1," />
    <StdViol msg="Conditional statement 'if' in a function 'WriteResults' should be followed by a block" ln="150" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="150" sev="3" auth="515817" locRef="1" rule="MISRA2004-14_9" lnHash="-738580689" tool="c++test" lineHash="-738580689" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" urgent="true" hash="-718207839" locEndLn="150" goals="1," />
    <StdViol msg="Implicit conversion between signed and unsigned type shall not be used" ln="154" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="154" sev="3" auth="515817" locRef="1" rule="MISRA2004-10_1_a" lnHash="84854640" tool="c++test" lineHash="84854640" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="18" locType="sr" urgent="true" hash="-718207839" locEndLn="154" goals="1," />
    <StdViol msg="Postfix operator applied to variable 'i'; prefer prefix type" ln="154" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="154" sev="3" auth="515817" locRef="1" rule="OPT-04" lnHash="84854640" tool="c++test" lineHash="84854640" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="47" locType="sr" urgent="true" hash="-718207839" locEndLn="154" goals="1," />
    <StdViol msg="Conditional statement 'if' in a function 'WriteResults' should be followed by a block" ln="155" locFile="/ACW_WordSearch/WordSearch.cpp" locStartln="155" sev="3" auth="515817" locRef="1" rule="MISRA2004-14_9" lnHash="-1270810671" tool="c++test" lineHash="-1270810671" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" urgent="true" hash="-718207839" locEndLn="155" goals="1," />
  </StdViols>

      <TestedFilesDetails>
         <Total name="Total (Suppressed)" supp="0" total="46">
            <Project id="ACW_WordSearch" name="ACW_WordSearch" supp="0" total="46">
               <Res loc="/ACW_WordSearch/WordSearch.cpp" locRef="1" locType="sr" name="WordSearch.cpp" supp="0" total="46" />
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>
